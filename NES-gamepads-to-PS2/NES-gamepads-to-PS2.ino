/*
================================================================================
   Notes
================================================================================

    Clock pins for PS/2 and SizifXXS should be irq pins.
    It works now, but the code needs to be reworked!
    TODO: 
    1. Rewrite lib PS2keyAdvanced and ps2dev to repetier
    2. Add classes for NES with buffers and statuses
*/
//===============================================================================
//  Connections
//===============================================================================

// Gamepads pins
#define PULT1_DATA_PIN 17
#define PULT1_LATCH_PIN 16
#define PULT1_CLOCK_PIN 15
#define PULT2_DATA_PIN 6
#define PULT2_LATCH_PIN 7
#define PULT2_CLOCK_PIN 8

// Emulator pins to connect into retro PC
#define SIZIF_KEYBOARD_DATA_PIN 5
#define SIZIF_KEYBOARD_CLOCK_PIN 3

// PS2 Keyboard pins to connect into Keyboard
#define PS2_KEYBOARD_DATA_PIN 4
#define PS2_KEYBOARD_CLOCK_PIN 2

// Time countdown for delay in polling cycles of gamepads
#define TICK 2

// var to read PS/2 kodes
uint16_t PS2_d;

#define PS2_REQUIRES_PROGMEM 1

//===============================================================================
//  Gamepads class
//===============================================================================

struct pult_cfg {
  int data;
  int latch;
  int clock;
};

pult_cfg pult_1 = {
  .data = PULT1_DATA_PIN,
  .latch = PULT1_LATCH_PIN,
  .clock = PULT1_CLOCK_PIN
};

pult_cfg pult_2 = {
  .data = PULT2_DATA_PIN,
  .latch = PULT2_LATCH_PIN,
  .clock = PULT2_CLOCK_PIN
};

void init_joystick(pult_cfg& cfg) {
  pinMode(cfg.data, INPUT_PULLUP);
  pinMode(cfg.clock, OUTPUT);
  pinMode(cfg.latch, OUTPUT);
  digitalWrite(cfg.clock, HIGH);
}

int get_keys_state_joystick(pult_cfg& cfg) {
  digitalWrite(cfg.latch, HIGH);
  delayMicroseconds(TICK);
  digitalWrite(cfg.latch, LOW);

  int keys_state = 0;

  for (int i = 0; i < 8; ++i) {
    delayMicroseconds(TICK);
    digitalWrite(cfg.clock, LOW);

    keys_state <<= 1;
    keys_state += digitalRead(cfg.data);

    delayMicroseconds(TICK);
    digitalWrite(cfg.clock, HIGH);
  }

  return keys_state;
}

int pult_1_keys = 0;
int pult_2_keys = 0;

// The order of shifting for the buttons:
// 0 - Right, 1 - Left, 2 - Down, 3 - Up, 4 - Start, 5 - Select, 6 - B, 7 - A
// Codes for keyboard Joystick
// OPQA Joystick
byte keys_pult_1_c[] = {0x4D, 0x44, 0x1C, 0x15, 0x5A, 0x29, 0x43, 0x29};
// Sizif Joystick - Numpad
byte keys_pult_2_c[] = {0x22, 0x1A, 0x3A, 0x42, 0x5A, 0x29, 0x21, 0x2A};

// TODO: Read from EEPROM, will be configured, change keycodes

//===============================================================================
//  libraries:
//  To Read keys from PS/2 keyboard 
//  https://github.com/techpaul/PS2KeyAdvanced
//  To Emulate PS/2 Keyboard
//  https://github.com/Harvie/ps2dev
//===============================================================================

#include <EEPROM.h>
#include <PS2KeyAdvanced.h>
#include <ps2dev.h>

PS2dev keyboard(SIZIF_KEYBOARD_CLOCK_PIN, SIZIF_KEYBOARD_DATA_PIN);
PS2KeyAdvanced PS2keyboard;

//===============================================================================
//  Keyboard emulator keys - emul.cpp
//===============================================================================

int enabled = 0; // pseudo variable for state of "keyboard"

// Map codes to keys
// For keyboard repetier
const uint16_t key_codes[][4] = {
  { 0x115,  0xE0, 0x6B, 0x00 }, { 0x8115, 0xE0, 0xF0, 0x6B }, // LEFT
  { 0x116,  0xE0, 0x74, 0x00 }, { 0x8116, 0xE0, 0xF0, 0x74 }, // RIGHT
  { 0x117,  0xE0, 0x75, 0x00 }, { 0x8117, 0xE0, 0xF0, 0x75 }, // UP
  { 0x118,  0xE0, 0x72, 0x00 }, { 0x8118, 0xE0, 0xF0, 0x72 }, // DOWN
  { 0x11B,  0x76, 0x00, 0x00 }, { 0x811B, 0xF0, 0x76, 0x00 }, // ESC
  { 0x161,  0x05, 0x00, 0x00 }, { 0x8161, 0xF0, 0x05, 0x00 }, // F1
  { 0x162,  0x06, 0x00, 0x00 }, { 0x8162, 0xF0, 0x06, 0x00 }, // F2
  { 0x163,  0x04, 0x00, 0x00 }, { 0x8163, 0xF0, 0x04, 0x00 }, // F3
  { 0x164,  0x0c, 0x00, 0x00 }, { 0x8164, 0xF0, 0x0c, 0x00 }, // F4
  { 0x165,  0x03, 0x00, 0x00 }, { 0x8165, 0xF0, 0x03, 0x00 }, // F5
  { 0x166,  0x0b, 0x00, 0x00 }, { 0x8166, 0xF0, 0x0b, 0x00 }, // F6
  { 0x167,  0x83, 0x00, 0x00 }, { 0x8167, 0xF0, 0x83, 0x00 }, // F7
  { 0x168,  0x0a, 0x00, 0x00 }, { 0x8168, 0xF0, 0x0a, 0x00 }, // F8
  { 0x169,  0x01, 0x00, 0x00 }, { 0x8169, 0xF0, 0x01, 0x00 }, // F9
  { 0x16A,  0x09, 0x00, 0x00 }, { 0x816A, 0xF0, 0x09, 0x00 }, // F10
  { 0x16B,  0x78, 0x00, 0x00 }, { 0x816B, 0xF0, 0x78, 0x00 }, // F11
  { 0x16C,  0x07, 0x00, 0x00 }, { 0x816C, 0xF0, 0x07, 0x00 }, // F12
  { 0x40,   0x0e, 0x00, 0x00 }, { 0x8040, 0xF0, 0x0e, 0x00 }, // ACCENT
  { 0x31,   0x16, 0x00, 0x00 }, { 0x8031, 0xF0, 0x16, 0x00 }, // 1
  { 0x32,   0x1e, 0x00, 0x00 }, { 0x8032, 0xF0, 0x1e, 0x00 }, // 2
  { 0x33,   0x26, 0x00, 0x00 }, { 0x8033, 0xF0, 0x26, 0x00 }, // 3
  { 0x34,   0x25, 0x00, 0x00 }, { 0x8034, 0xF0, 0x25, 0x00 }, // 4
  { 0x35,   0x2e, 0x00, 0x00 }, { 0x8035, 0xF0, 0x2e, 0x00 }, // 5
  { 0x36,   0x36, 0x00, 0x00 }, { 0x8036, 0xF0, 0x36, 0x00 }, // 6
  { 0x37,   0x3d, 0x00, 0x00 }, { 0x8037, 0xF0, 0x3d, 0x00 }, // 7
  { 0x38,   0x3e, 0x00, 0x00 }, { 0x8038, 0xF0, 0x3e, 0x00 }, // 8
  { 0x39,   0x46, 0x00, 0x00 }, { 0x8039, 0xF0, 0x46, 0x00 }, // 9
  { 0x30,   0x45, 0x00, 0x00 }, { 0x8030, 0xF0, 0x45, 0x00 }, // 0
  { 0x3C,   0x4e, 0x00, 0x00 }, { 0x803C, 0xF0, 0x4e, 0x00 }, // -
  { 0x5F,   0x55, 0x00, 0x00 }, { 0x805F, 0xF0, 0x55, 0x00 }, // =
  { 0x11C,  0x66, 0x00, 0x00 }, { 0x811C, 0xF0, 0x66, 0x00 }, // BACKSPACE
  { 0x11D,  0x0d, 0x00, 0x00 }, { 0x811D, 0xF0, 0x0d, 0x00 }, // TAB
  { 0x51,   0x15, 0x00, 0x00 }, { 0x8051, 0xF0, 0x15, 0x00 }, // Q
  { 0x57,   0x1d, 0x00, 0x00 }, { 0x8057, 0xF0, 0x1d, 0x00 }, // W
  { 0x45,   0x24, 0x00, 0x00 }, { 0x8045, 0xF0, 0x24, 0x00 }, // E
  { 0x52,   0x2d, 0x00, 0x00 }, { 0x8052, 0xF0, 0x2d, 0x00 }, // R
  { 0x54,   0x2c, 0x00, 0x00 }, { 0x8054, 0xF0, 0x2c, 0x00 }, // T
  { 0x59,   0x35, 0x00, 0x00 }, { 0x8059, 0xF0, 0x35, 0x00 }, // Y
  { 0x55,   0x3c, 0x00, 0x00 }, { 0x8055, 0xF0, 0x3c, 0x00 }, // U
  { 0x49,   0x43, 0x00, 0x00 }, { 0x8049, 0xF0, 0x43, 0x00 }, // I
  { 0x4F,   0x44, 0x00, 0x00 }, { 0x804F, 0xF0, 0x44, 0x00 }, // O
  { 0x50,   0x4d, 0x00, 0x00 }, { 0x8050, 0xF0, 0x4d, 0x00 }, // P
  { 0x5D,   0x54, 0x00, 0x00 }, { 0x805D, 0xF0, 0x54, 0x00 }, // OPEN_BRACKET
  { 0x5E,   0x5b, 0x00, 0x00 }, { 0x805E, 0xF0, 0x5b, 0x00 }, // CLOSE_BRACKET
  { 0x11E,  0x5a, 0x00, 0x00 }, { 0x811E, 0xF0, 0x5a, 0x00 }, // ENTER
  { 0x1103, 0x58, 0xF0, 0x58 }, { 0x8103, 0x58, 0xF0, 0x58 }, // CAPS_LOCK on/off 
  { 0x41,   0x1c, 0x00, 0x00 }, { 0x8041, 0xF0, 0x1c, 0x00 }, // A
  { 0x53,   0x1b, 0x00, 0x00 }, { 0x8053, 0xF0, 0x1b, 0x00 }, // S
  { 0x44,   0x23, 0x00, 0x00 }, { 0x8044, 0xF0, 0x23, 0x00 }, // D
  { 0x46,   0x2b, 0x00, 0x00 }, { 0x8046, 0xF0, 0x2b, 0x00 }, // F
  { 0x47,   0x34, 0x00, 0x00 }, { 0x8047, 0xF0, 0x34, 0x00 }, // G
  { 0x48,   0x33, 0x00, 0x00 }, { 0x8048, 0xF0, 0x33, 0x00 }, // H
  { 0x4A,   0x3b, 0x00, 0x00 }, { 0x804A, 0xF0, 0x3b, 0x00 }, // J
  { 0x4B,   0x42, 0x00, 0x00 }, { 0x804B, 0xF0, 0x42, 0x00 }, // K
  { 0x4C,   0x4b, 0x00, 0x00 }, { 0x804C, 0xF0, 0x4b, 0x00 }, // L
  { 0x5B,   0x4c, 0x00, 0x00 }, { 0x805B, 0xF0, 0x4c, 0x00 }, // ; SEMI_COLON
  { 0x3A,   0x52, 0x00, 0x00 }, { 0x803A, 0xF0, 0x52, 0x00 }, // TICK_MARK
  { 0x5C,   0x5d, 0x00, 0x00 }, { 0x805C, 0xF0, 0x5d, 0x00 }, // BACKSLASH
  { 0x4106, 0x12, 0x00, 0x00 }, { 0x8106, 0xF0, 0x12, 0x00 }, // LEFT_SHIFT
  { 0x5A,   0x1a, 0x00, 0x00 }, { 0x805A, 0xF0, 0x1a, 0x00 }, // Z
  { 0x58,   0x22, 0x00, 0x00 }, { 0x8058, 0xF0, 0x22, 0x00 }, // X
  { 0x43,   0x21, 0x00, 0x00 }, { 0x8043, 0xF0, 0x21, 0x00 }, // C
  { 0x56,   0x2a, 0x00, 0x00 }, { 0x8056, 0xF0, 0x2a, 0x00 }, // V
  { 0x42,   0x32, 0x00, 0x00 }, { 0x8042, 0xF0, 0x32, 0x00 }, // B
  { 0x4E,   0x31, 0x00, 0x00 }, { 0x804E, 0xF0, 0x31, 0x00 }, // N
  { 0x4D,   0x3a, 0x00, 0x00 }, { 0x804D, 0xF0, 0x3a, 0x00 }, // M
  { 0x3B,   0x41, 0x00, 0x00 }, { 0x803B, 0xF0, 0x41, 0x00 }, // , COMMA
  { 0x3D,   0x49, 0x00, 0x00 }, { 0x803D, 0xF0, 0x49, 0x00 }, // . PERIOD
  { 0x3E,   0x4a, 0x00, 0x00 }, { 0x803E, 0xF0, 0x4a, 0x00 }, // SLASH
  { 0x4107, 0x59, 0x00, 0x00 }, { 0x8107, 0xF0, 0x59, 0x00 }, // RIGHT_SHIFT
  { 0x2108, 0x14, 0x00, 0x00 }, { 0x8108, 0xF0, 0x14, 0x00 },	// LEFT_CONTROL
	{ 0x90A,  0x11, 0x00, 0x00 }, { 0x810A, 0xF0, 0x11, 0x00 },	// LEFT_ALT
	{ 0x101,  0x77, 0xF0, 0x77 }, { 0x8101, 0x77, 0xF0, 0x77 },	// NUM_LOCK on/off
			// ASTERISK = 0x7c,
			// NUMPAD_MINUS = 0x7b,
	{ 0x27,   0x6c, 0x00, 0x00 }, { 0x8027, 0xF0, 0x6c, 0x00 },	// NUMPAD_SEVEN,
	{ 0x28,   0x75, 0x00, 0x00 }, { 0x8028, 0xF0, 0x75, 0x00 },	// NUMPAD_EIGHT,
	{ 0x29,   0x7d, 0x00, 0x00 }, { 0x8029, 0xF0, 0x7d, 0x00 },	// NUMPAD_NINE,
			// PLUS = 0x79,
	{ 0x24,   0x6b, 0x00, 0x00 }, { 0x8024, 0xF0, 0x6b, 0x00 },	// NUMPAD_FOUR,
	{ 0x25,   0x73, 0x00, 0x00 }, { 0x8025, 0xF0, 0x73, 0x00 },	// NUMPAD_FIVE,
	{ 0x26,   0x74, 0x00, 0x00 }, { 0x8026, 0xF0, 0x74, 0x00 },	// NUMPAD_SIX,
	{ 0x21,   0x69, 0x00, 0x00 }, { 0x8021, 0xF0, 0x69, 0x00 },	// NUMPAD_ONE,
	{ 0x22,   0x72, 0x00, 0x00 }, { 0x8022, 0xF0, 0x72, 0x00 },	// NUMPAD_TWO,
	{ 0x23,   0x73, 0x00, 0x00 }, { 0x8023, 0xF0, 0x73, 0x00 },	// NUMPAD_THREE,
	{ 0x20,   0x70, 0x00, 0x00 }, { 0x8020, 0xF0, 0x70, 0x00 },	// NUMPAD_ZERO,
			// DECIMAL = 0x71
  { 0x11F,  0x29, 0x00, 0x00 }, { 0x811F, 0xF0, 0x29, 0x00 }}; // Space

const int Key_count = sizeof(key_codes)/sizeof(uint16_t)/4;

void Sendcode(uint16_t scode) {

int send_state = -1;

  for(int i = 0; i < Key_count; i++) {
    if(key_codes[i][0] == scode) {
      do {
        send_state = keyboard.write(key_codes[i][1]);
        if (key_codes[i][2] != 0x00) send_state += keyboard.write(key_codes[i][2]);
        if (key_codes[i][3] != 0x00) send_state += keyboard.write(key_codes[i][3]);
      }
       while (send_state < 0);
    }
  }

}

void ack() {
  //acknowledge commands
  while(keyboard.write(0xFA));
}

int keyboardcommand(int command) {
  unsigned char val;
  switch (command) {
  case 0xFF: //reset
    ack();
    //the while loop lets us wait for the host to be ready
    while(keyboard.write(0xAA)!=0);
    break;
  case 0xFE: //resend
    ack();
    break;
  case 0xF6: //set defaults
    //enter stream mode
    ack();
    break;
  case 0xF5: //disable data reporting
    //FM
    enabled = 0;
    ack();
    break;
  case 0xF4: //enable data reporting
    //FM
    enabled = 1;
    ack();
    break;
  case 0xF3: //set typematic rate
    ack();
    keyboard.read(&val); //do nothing with the rate
    ack();
    break;
  case 0xF2: //get device id
    ack();
    keyboard.write(0xAB);
    keyboard.write(0x83);
    break;
  case 0xF0: //set scan code set
    ack();
    keyboard.read(&val); //do nothing with the rate
    ack();
    break;
  case 0xEE: //echo
    //ack();
    keyboard.write(0xEE);
    break;
  case 0xED: //set/reset LEDs
    ack();
    keyboard.read(&val); //do nothing with the rate
    Serial.println('Val = '+val);
    ack();
    break;
  }
}


//===============================================================================
//  Setup
//===============================================================================

void setup() {
  // send the keyboard start up to SIZIF XXS
  while(keyboard.write(0xAA)!=0);
  delay(10);

  // init for PS/2 keyboard
  PS2keyboard.begin(PS2_KEYBOARD_DATA_PIN, PS2_KEYBOARD_CLOCK_PIN);
  delay(10);

  // init Gamepads
  init_joystick(pult_1);
  init_joystick(pult_2);

  // To write debug info
  Serial.begin(9600);

}

//===============================================================================
//  loop
//===============================================================================

void loop() {

  unsigned char c;
  //if host device wants to send a command:
  if((digitalRead(SIZIF_KEYBOARD_CLOCK_PIN)==LOW) || (digitalRead(SIZIF_KEYBOARD_DATA_PIN) == LOW)) {
    while(keyboard.read(&c)) ;
    keyboardcommand(c);
  }
  else { 
    //send keypresses accordingly using scancodes
    if (PS2keyboard.available()) {
      Sendcode(PS2keyboard.read());
      // PS2_d & 0xFF - ASCII Code
      // c >> 8 - Status bits
    }

      // read Gamepads data
      int pult_1_keys2 = get_keys_state_joystick(pult_1);
      int pult_2_keys2 = get_keys_state_joystick(pult_2);

      for (int i = 0; i < 8; i++) {

        if( (pult_1_keys & (1 << i)) != (pult_1_keys2 & (1 << i)) ){
          if (!(pult_1_keys2 & (1 << i))) {
            int send_state = -1;
            do send_state = keyboard.write(keys_pult_1_c[i]);
            while(send_state < 0);
          } else {
            int send_state = -1;
            do {
              send_state = keyboard.write(0xF0);
              send_state += keyboard.write(keys_pult_1_c[i]);
            }
            while(send_state < 0);
          }
        }

        if( (pult_2_keys & (1 << i)) != (pult_2_keys2 & (1 << i)) ){
          if (!(pult_2_keys2 & (1 << i))) {
            int send_state = -1;
            do send_state = keyboard.write(keys_pult_2_c[i]);
            while(send_state < 0);
          } else {
            int send_state = -1;
            do {
              send_state = keyboard.write(0xF0);
              send_state += keyboard.write(keys_pult_2_c[i]);
            }
            while(send_state < 0);
          }
        }
      }

      pult_1_keys = pult_1_keys2;
      pult_2_keys = pult_2_keys2;

  }

}